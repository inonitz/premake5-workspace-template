#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout(binding = 0)                    uniform sampler2D previousFrame;
layout(binding = 1)                    uniform sampler2D velocityField;
layout(binding = 2, rgba32f) writeonly uniform image2D   nextFrame;


uniform uint  ku_iteration;
uniform ivec2 ku_simdims;
uniform vec2  ku_simUnitCoord;
uniform float ku_dt;
uniform float ku_alpha;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims);
vec2 k_simrdxdy  = 1.0f / ku_simUnitCoord;
vec2 k_simdxdysq = ku_simUnitCoord * ku_simUnitCoord;


bvec4 isBoundary(ivec2 coords);
vec4  advection_step(
    in ivec2     coord,
    in vec2      normcoord, 
    in sampler2D ufield, 
    in sampler2D quantity_read
);
float heatDiffusion(in ivec2 ij);


void main()
{
    ivec2 texelCoord   = ivec2(gl_GlobalInvocationID.xy);
    vec2  normtexCoord = vec2(texelCoord) * k_unitCoord; 
    bvec4 boundaryBits = isBoundary(texelCoord); 


    /* Advection of density Scalar field */
    vec4 result = texelFetch(previousFrame, texelCoord, 0);
    if(ku_iteration == 1) {
        result.x = advection_step(
            texelCoord, 
            normtexCoord, 
            velocityField, 
            previousFrame
        ).x;
    } else {
        result.y = heatDiffusion(texelCoord);
        
        texelCoord += ivec2(boundaryBits.xy) - ivec2(boundaryBits.zw);
        float boundaryVal = texelFetch(previousFrame, texelCoord, 0).y;
        result.y = mix(result.y, boundaryVal, float(any(boundaryBits)));
    }


    imageStore(nextFrame, texelCoord, result);
    return;
}


bvec4 isBoundary(ivec2 coords) {
    /* if .xy components are 1, the pixel is on the bottom left  */
    /* if .zw components are 1, the pixel is on the top    right */
    /* we can add/subtract them to get the neighbouring pixel (not on the boundary) */
    return bvec4(
        coords.x <= 0, 
        coords.y <= 0,
        coords.x >= (ku_simdims.x - 1),
        coords.y >= (ku_simdims.y - 1)
    );
};


vec4 textureBiLerp(in sampler2D tex, in vec2 uv) {
    vec2 texBufferCoord = uv * vec2(ku_simdims);
    vec2 texelCoord = floor(texBufferCoord);
    vec2 weight = texBufferCoord - texelCoord;

    vec4 bottom = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 0), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 0), 0),
        weight.x
    );
    vec4 top    = mix(
        texelFetch(tex, ivec2(texelCoord) + ivec2(0, 1), 0), 
        texelFetch(tex, ivec2(texelCoord) + ivec2(1, 1), 0),
        weight.x
    );
    return mix(bottom, top, weight.y);
}


vec4 advection_step(
    in ivec2     coord,
    in vec2      normcoord, 
    in sampler2D ufield, 
    in sampler2D quantity_read
) {
    vec2 newcoord = normcoord - ku_dt * k_simrdxdy * texelFetch(ufield, coord, 0).xy;
    return textureBiLerp(quantity_read, newcoord);
}


/*
    Laplacian Discretized using Centeral Difference operator,

*/
float heatDiffusion(in ivec2 ij) 
{
    float psi    = 2.0f * ku_dt * ku_alpha;
    float dxdysq = k_simdxdysq.x * k_simdxdysq.y;
    float denom  = 2.0f * psi * (k_simdxdysq.x + k_simdxdysq.y) + dxdysq;
    float neighbourValues[5] = float[5](
        texelFetch(previousFrame, ij + ivec2(1, 0), 0).y,
        texelFetch(previousFrame, ij - ivec2(1, 0), 0).y,
        texelFetch(previousFrame, ij + ivec2(0, 1), 0).y,
        texelFetch(previousFrame, ij - ivec2(0, 1), 0).y,
        texelFetch(previousFrame, ij,               0).y
    );

    vec2 temp = vec2(
        neighbourValues[2] + neighbourValues[3],
        neighbourValues[0] + neighbourValues[1]
    );
    temp *= k_simdxdysq * psi;

    denom = 1.0f / denom;
    return (temp.x + temp.y + dxdysq * neighbourValues[4]) * denom; 
}
