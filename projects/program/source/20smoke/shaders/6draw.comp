#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout(binding = 0)                    uniform sampler2D fieldSampler;
layout(binding = 1, rgba32f) writeonly uniform image2D   screentexture;


uniform uint  ku_selectTextureDraw;
uniform float ku_brightness;
uniform ivec2 ku_simdims;
uniform vec2  ku_simUnitCoord;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims);
vec2 k_rdxdy     = vec2(1) / ku_simUnitCoord;


vec4 getDensityColor(in float density)
{
    const vec4 map[3] = {
        vec4(1.0f, 0.0f, 0.0f, 1.0f),
        vec4(0.0f, 0.0f, 1.0f, 1.0f),
        vec4(1.0f, 1.0f, 1.0f, 1.0f),
    };
    return map[ uint(density > 0.0f) + uint(density == 0.0f) * 2 ];
}


float curl2D(
    in sampler2D tex,
    in ivec2     texel
) {
    float samples[4] = float[4](
        texelFetch(tex, texel + ivec2(1, 0), 0).x,
        texelFetch(tex, texel - ivec2(1, 0), 0).x,
        texelFetch(tex, texel + ivec2(0, 1), 0).y,
        texelFetch(tex, texel - ivec2(0, 1), 0).y
    );
    
    vec2 temp = vec2(samples[2] - samples[3], samples[0] - samples[1]);
    temp *= k_rdxdy * 0.5f;
    
    return temp.x - temp.y;
}

/* 
    On Colourmaps:
    https://blog.habrador.com/2023/04/colormaps-overview-code-implementations-rainbow-virids.html
    See Also:
    https://www.kennethmoreland.com/color-advice/
*/
vec4 colourMap(in float value)
{
    const vec4 colourmap[8] = vec4[8](
        vec4(0	              , 0.267003985321379,	0.0048725657145796,	0.329415068552478),
        vec4(0.142857142857143, 0.274741031994728,	0.196973267359168,	0.497250443407826),
        vec4(0.285714285714286, 0.21267123715448,	0.359101377053754,	0.551635046867701),
        vec4(0.428571428571429, 0.152958098732024,	0.498051451273065,	0.557685326908152),
        vec4(0.571428571428571, 0.122053591816304,	0.63210554298126,	0.530848865724732),
        vec4(0.714285714285714, 0.290013937283251,	0.758845118505219,	0.427827160921214),
        vec4(0.857142857142857, 0.622182341062654,	0.853814292866397,	0.226247911149647),
        vec4(1	              , 0.99324814893356,	0.906154763420806,	0.143935943669684)
    );


    if(value < 0.0f)
        return vec4(1, 0, 0, 0);
    
    if(value > 1.0f)
        return vec4(1);
    

    value = clamp(value, 0.0f, 1.0f);
    bool found = false;
    int i = 0;
    while(!found && i < 7 ) {
        found = (colourmap[i].x < value && value < colourmap[i+1].x); 
        i += int(!found);
    }


    return vec4(
        mix(
            colourmap[i+1].yzw,
            colourmap[i].yzw, 
            value / (colourmap[i+1].x - colourmap[i].x)
        ), 0
    );
}


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 norm_texcoord = vec2(texelCoord) / vec2(ku_simdims);
    
    vec4 write_value = texelFetch(fieldSampler, texelCoord, 0);
    if(ku_selectTextureDraw == 1) {
        write_value *= ku_brightness;
    } 
    else if(ku_selectTextureDraw == 3) {
        write_value = colourMap(curl2D(fieldSampler, texelCoord));
    }
    else if(ku_selectTextureDraw == 4) {
        write_value = colourMap(ku_brightness * abs(curl2D(fieldSampler, texelCoord)));
    }
    else if(ku_selectTextureDraw == 5) {
        write_value *= ku_brightness;
    }
    imageStore(screentexture, texelCoord, write_value);
    return;
}