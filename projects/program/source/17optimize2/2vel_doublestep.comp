#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0)                    uniform sampler2D initialField;
layout (binding = 1, rgba32f) writeonly uniform image2D   outputField;


bvec4 isBoundary(ivec2 coords);
vec2 new_velocity(ivec2 texel, in vec2 parentVelocity);


/* 
    Single iteration of a jacobi solver
*/
vec2 laplacian(
    in sampler2D x,
    in ivec2 ij,
    in vec2 xij
);

uniform float ku_dt;
uniform float ku_viscosity;
uniform ivec2 ku_simdims;
uniform vec2  ku_simUnitCoord;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 
vec2 k_simrdxdysq = 1.0f / (ku_simUnitCoord * ku_simUnitCoord);


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    bvec4 boundaryBits = isBoundary(texelCoord);
    vec2 result = vec2(0);

    if(any(boundaryBits)) {
        result = -1.0f * texelFetch(initialField, texelCoord + ivec2(boundaryBits.xy) - ivec2(boundaryBits.zw), 0).xy;
        imageStore(outputField, texelCoord, vec4(result, 0.0f, 0.0f));
        return;
    }

    vec2 xij = texelFetch(initialField, texelCoord, 0).xy;
    vec2 next_iteration_vel = xij + ku_viscosity * ku_dt * laplacian(initialField, texelCoord, xij);
    vec2 next_iteration_neighbours[4] = vec2[4](
        new_velocity(texelCoord + ivec2(1, 0), xij),
        new_velocity(texelCoord - ivec2(1, 0), xij),
        new_velocity(texelCoord + ivec2(0, 1), xij),
        new_velocity(texelCoord - ivec2(0, 1), xij)
    );
    /* 2nd iteration laplacian computed inside result */
    result += (next_iteration_neighbours[0] + next_iteration_neighbours[1] - 2.0f * next_iteration_vel) * k_simrdxdysq.y;
    result += (next_iteration_neighbours[2] + next_iteration_neighbours[3] - 2.0f * next_iteration_vel) * k_simrdxdysq.x;
    result = next_iteration_vel + ku_viscosity * ku_dt * result;
    imageStore(outputField, texelCoord, vec4(result, 0.0f, 0.0f));
    return;
}


bvec4 isBoundary(ivec2 coords) {
    return bvec4(
        coords.x <= 0, 
        coords.y <= 0,
        coords.x >= (ku_simdims.x - 1),
        coords.y >= (ku_simdims.y - 1)
    );
}


vec2 new_velocity(ivec2 texel, in vec2 parentVelocity)
{
    bvec4 boundaryBits = isBoundary(texel);
    vec2 valueij, result;
    if(any(boundaryBits)) {
        ivec2 texelToFetch = texel + ivec2(boundaryBits.xy) - ivec2(boundaryBits.zw);
        result = -1.0f * parentVelocity;
        // imageStore(outputField, texel, vec4(result, 0.0f, 0.0f));
        // return;
    } else { 
        valueij = texelFetch(initialField, texel, 0).xy;
        result = valueij + ku_viscosity * ku_dt * laplacian(initialField, texel, valueij);
        // imageStore(outputField, texel, vec4(result, 0.0f, 0.0f));
    }
    return result;
}


vec2 laplacian(
    in sampler2D x,
    in ivec2 ij,
    in vec2 xij
) {
    vec2 result = vec2(0.0f);
    vec2 neighbourValues[4] = vec2[4](
        texelFetch(x, ij + ivec2(1, 0), 0).xy,
        texelFetch(x, ij - ivec2(1, 0), 0).xy,
        texelFetch(x, ij + ivec2(0, 1), 0).xy,
        texelFetch(x, ij - ivec2(0, 1), 0).xy
    );

    result += (neighbourValues[0] + neighbourValues[1] - 2.0f * xij) * k_simrdxdysq.y;
    result += (neighbourValues[2] + neighbourValues[3] - 2.0f * xij) * k_simrdxdysq.x;
    return result;
}