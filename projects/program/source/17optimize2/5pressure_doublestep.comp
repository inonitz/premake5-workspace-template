#version 450 core
layout(local_size_x =   5, local_size_y =   5, local_size_z =   5) in;
layout (binding = 0)                    uniform sampler2D oldPressureField;
layout (binding = 1, rgba32f) writeonly uniform image2D   newPressureField;


bvec4 isBoundary(ivec2 coords);
float new_pressure(ivec2 texel, in float parentPressure);
float updated_pressure(
    in sampler2D tex,
    in ivec2     ij,
    in float     alpha
);


uniform ivec2 ku_simdims;
uniform vec2  ku_simUnitCoord;
vec2 k_unitCoord = vec2(1) / vec2(ku_simdims); 
vec2 k_simdxdysq = (ku_simUnitCoord * ku_simUnitCoord);


void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    bvec4 boundary = isBoundary(texelCoord);
    ivec2 texelToFetch;
    vec4  result = texelFetch(oldPressureField, texelCoord, 0);


    if(any(boundary)) {
        texelToFetch = texelCoord + ivec2(boundary.xy) - ivec2(boundary.zw);
        result.z = texelFetch(oldPressureField, texelToFetch, 0).z;
        imageStore(newPressureField, texelCoord, result);
        return;
    }


    vec4 next_iteration_neighbours = vec4(
        new_pressure(texelCoord + ivec2(1, 0), result.z),
        new_pressure(texelCoord - ivec2(1, 0), result.z),
        new_pressure(texelCoord + ivec2(0, 1), result.z),
        new_pressure(texelCoord - ivec2(0, 1), result.z)
    );
    float second_iteration_pressure = 0.0f;
    second_iteration_pressure += k_simdxdysq.y * ( next_iteration_neighbours[0] + next_iteration_neighbours[1] );
    second_iteration_pressure += k_simdxdysq.x * ( next_iteration_neighbours[2] + next_iteration_neighbours[3] );
    second_iteration_pressure -= result.w * k_simdxdysq.x * k_simdxdysq.y;
    second_iteration_pressure *= 0.5f;
    second_iteration_pressure *= 1.0f / (k_simdxdysq.x + k_simdxdysq.y);
    result.z = second_iteration_pressure;
    imageStore(newPressureField, texelCoord, result);
    return;
}


bvec4 isBoundary(ivec2 coords) {
    return bvec4(
        coords.x <= 0, 
        coords.y <= 0,
        coords.x >= (ku_simdims.x - 1),
        coords.y >= (ku_simdims.y - 1)
    );
}


float new_pressure(ivec2 texel, in float parentPressure)
{
    bvec4 boundaryBits = isBoundary(texel);
    float result;
    if(any(boundaryBits)) {
        result = parentPressure;
    } else {
        vec4 vij = texelFetch(oldPressureField, texel, 0);
        result = updated_pressure(
            oldPressureField, 
            texel,
            vij.w
        );
    }
    return result;
}


float updated_pressure(
    in sampler2D tex,
    in ivec2     ij,
    in float     alpha
) {
    vec4 neighbours = vec4(
        texelFetch(tex, ij + ivec2(1, 0), 0).z,
        texelFetch(tex, ij - ivec2(1, 0), 0).z,
        texelFetch(tex, ij + ivec2(0, 1), 0).z,
        texelFetch(tex, ij - ivec2(0, 1), 0).z
    );
    
    float sum = 0.0f;
    sum += k_simdxdysq.y * ( neighbours[0] + neighbours[1] );
    sum += k_simdxdysq.x * ( neighbours[2] + neighbours[3] );
    sum -= alpha * k_simdxdysq.x * k_simdxdysq.y;
    sum *= 0.5f;
    sum *= 1.0f / (k_simdxdysq.x + k_simdxdysq.y);
    return sum;
}